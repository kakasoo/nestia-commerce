generator client {
  provider = "prisma-client-js"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "Commerce"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// @namespace Product
model ShippingBundle {
  id                    String                       @id @default(uuid())
  name                  String /// name of this shipping bundle.
  sellerId              String
  FreeShippingThreshold Int? /// If method column's value is `FreeOverThreshold`, This value is not null.
  method                ShippingFeeCalculationMethod /// `MIN` OR `MAX` OR `FREE_OVER_THRESHOLD`. Shipping cost calculation method
  status                Status /// `ACTIVE` OR `INACTIVE`. If this value is inactive, bundle shipping criteria will not be applied.
  createdAt             DateTime                     @default(now()) /// DateTime this row was created.
  updatedAt             DateTime                     @default(now()) /// DateTime this row was updated.
  isDeleted             Boolean                      @default(false) /// If this row was deleted, It will be true. And `updatedAt` column will mean `deletedAt`.

  Seller Seller @relation(fields: [sellerId], references: [id])
}

/// @namespace Seller
model Seller {
  id             String   @id @default(uuid())
  brn            String /// businessRegistrationNumber
  email          String /// The email address of the seller.
  hashedPassword String /// The encrypted value of the seller's password.
  createdAt      DateTime @default(now()) /// DateTime this row was created.
  updatedAt      DateTime @default(now()) /// DateTime this row was updated.
  isDeleted      Boolean  @default(false) /// If this row was deleted, It will be true. And `updatedAt` column will mean `deletedAt`.

  Log            SellerLog[]
  ShippingBundle ShippingBundle[]
}

/// @namespace Buyer
/// Generate a unique identifier for each request from the browser to uniquely identify buyers who are not logged in.
model Buyer {
  id        String   @id @default(uuid()) /// Assigns the same ID for the same session, generated by the client.
  memberId  String? /// Records the memberId if the session is identified.
  createdAt DateTime @default(now()) /// DateTime this row was created.
  updatedAt DateTime @default(now()) /// DateTime this row was updated.
  isDeleted Boolean  @default(false) /// If this row was deleted, It will be true. And `updatedAt` column will mean `deletedAt`.

  member Member?    @relation(fields: [memberId], references: [id])
  Log    BuyerLog[]
}

/// @namespace Buyer
/// Represents a buyer who has signed up.
model Member {
  id             String   @id @default(uuid())
  name           String? /// The actual name of the member.
  nickname       String? /// The nickname of the member.
  phone          String /// The phone number of the member.
  email          String /// The email address of the member.
  hashedPassword String /// The encrypted value of the member's password.
  age            Int? /// The age of the member.
  gender         Gender? /// The gender of the member (MALE | FEMALE). If this value is null, It means `unknown`.
  address        String? /// The address of the member.
  occupation     String? /// The occupation of the member.
  deleted        Boolean  @default(false) /// Indicates whether the information is deleted; deletion time is determined by updatedAt.
  createdAt      DateTime @default(now()) /// The date when the member information was created.
  updatedAt      DateTime @updatedAt /// The most recent update date of the information.

  buyer Buyer[]
}

/// @namespace log
/// Records logs for all requests.
model BuyerLog {
  id        String   @id @default(uuid()) /// The unique ID of the log, attached to the Request object.
  buyerId   String /// Indicates which buyer made the request.
  method    String /// 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'.
  url       String /// Stores the original URL.
  headers   String /// Stores the buyer's HTTP headers.
  query     String? /// Stores the buyer's HTTP query parameters as objects.
  param     String? /// Stores the buyer's HTTP parameters as objects.
  body      String? /// Stores the buyer's HTTP body as objects.
  ttl       Int? /// Measured in ms, the time taken for the request from request to response.
  error     Boolean  @default(false) /// Updates the Request object ID in case of an error.
  createdAt DateTime @default(now()) /// DateTime this row was created.
  updatedAt DateTime @default(now()) /// DateTime this row was updated.
  isDeleted Boolean  @default(false) /// If this row was deleted, It will be true. And `updatedAt` column will mean `deletedAt`.
  buyer     Buyer    @relation(fields: [buyerId], references: [id])
  sellerId  String?
}

/// @namespace log
/// Records logs for all requests.
model SellerLog {
  id        String   @id @default(uuid()) /// The unique ID of the log, attached to the Request object.
  sellerId  String /// Indicates which seller made the request.
  method    String /// 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'.
  url       String /// Stores the original URL.
  headers   String /// Stores the seller's HTTP headers.
  query     String? /// Stores the seller's HTTP query parameters as objects.
  param     String? /// Stores the seller's HTTP parameters as objects.
  body      String? /// Stores the seller's HTTP body as objects.
  ttl       Int? /// Measured in ms, the time taken for the request from request to response.
  error     Boolean  @default(false) /// Updates the Request object ID in case of an error.
  createdAt DateTime @default(now()) /// DateTime this row was created.
  updatedAt DateTime @default(now()) /// DateTime this row was updated.
  isDeleted Boolean  @default(false) /// If this row was deleted, It will be true. And `updatedAt` column will mean `deletedAt`.

  Seller Seller? @relation(fields: [sellerId], references: [id])
}

enum ShippingFeeCalculationMethod {
  MIN // Use the product's smallest `deliveryFee` in the bundle.
  MAX // Use the product's biggest `deliveryFee` in the bundle.
  FREE_OVER_THRESHOLD // "Free Shipping Threshold" refers to the criteria where shipping fees are waived if the total value of items ordered by a customer exceeds a certain amount.
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
}
